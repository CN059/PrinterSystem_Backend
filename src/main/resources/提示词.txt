请帮我开发一个打印预约系统，前端使用 Vue3 + TypeScript + ElementPlus + Pinia + Vue Router + Axios，后端使用 Spring Boot 3 + MyBatis + MySQL + Sa-Token。主要功能包括用户注册登录、文档上传、设置打印参数、预约时间、生成订单、支付模拟、订单状态跟踪等，管理员可管理用户和订单。

这是我的数据库脚本，记录了数据库结构
-- 创建数据库
CREATE DATABASE IF NOT EXISTS print_service_system
  DEFAULT CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;
USE print_service_system;
-- 用户表：记录系统用户信息
CREATE TABLE users (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '用户ID',
  account VARCHAR(50) NOT NULL UNIQUE COMMENT '登录账号（可为手机号/邮箱/自定义账号）',
  username VARCHAR(50) NOT NULL COMMENT '用户昵称',
  password VARCHAR(255) NOT NULL COMMENT '加密后的密码',
  phone VARCHAR(20) COMMENT '手机号',
  email VARCHAR(100) COMMENT '邮箱地址',
  role ENUM('USER', 'ADMIN') NOT NULL DEFAULT 'USER' COMMENT '角色',
  status ENUM('ENABLED', 'DISABLED') NOT NULL DEFAULT 'ENABLED' COMMENT '账户状态',
  exp INT UNSIGNED NOT NULL DEFAULT 0 COMMENT '用户经验值（每打印一面+2 EXP）',
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  INDEX idx_account (account),
  INDEX idx_username (username),
  INDEX idx_phone (phone),
  INDEX idx_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表';
-- 地址表：记录用户的多个收货地址，并支持设置默认地址
CREATE TABLE addresses (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '地址ID',
  user_id BIGINT UNSIGNED NOT NULL COMMENT '关联用户ID',
  full_address VARCHAR(512) NOT NULL COMMENT '完整地址',
  receiver_name VARCHAR(50) NOT NULL COMMENT '收件人姓名',
  receiver_phone VARCHAR(20) NOT NULL COMMENT '收件人电话',
  is_default BOOLEAN NOT NULL DEFAULT FALSE COMMENT '是否为默认地址',
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  INDEX idx_user_id (user_id),
  INDEX idx_is_default (is_default)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='地址表';
-- 文档表：记录用户上传的打印文件信息
CREATE TABLE documents (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '文档ID',
  user_id BIGINT UNSIGNED NOT NULL COMMENT '上传者ID',
  file_name VARCHAR(255) NOT NULL COMMENT '文件名',
  file_path VARCHAR(512) NOT NULL COMMENT '存储路径',
  page_count INT NOT NULL COMMENT '页面数',
  uploaded_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '上传时间',
  is_printed BOOLEAN NOT NULL DEFAULT FALSE COMMENT '是否已打印',
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  INDEX idx_user_id (user_id),
  INDEX idx_uploaded_at (uploaded_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='文档表';
-- 打印订单表：记录用户的打印订单详情
CREATE TABLE print_orders (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '订单ID',
  order_no VARCHAR(50) NOT NULL UNIQUE COMMENT '订单编号',
  user_id BIGINT UNSIGNED NOT NULL COMMENT '关联用户ID',
  document_id BIGINT UNSIGNED NOT NULL COMMENT '关联文档ID',
  address_id BIGINT UNSIGNED COMMENT '实际选择的收货地址ID',
  total_pages INT NOT NULL COMMENT '总页数',
  price DECIMAL(10,2) NOT NULL DEFAULT 0.00 COMMENT '订单总价',
  print_range VARCHAR(50) NOT NULL COMMENT '打印范围（ALL / CUSTOM）',
  duplex BOOLEAN NOT NULL COMMENT '是否双面打印',
  orientation VARCHAR(50) NOT NULL COMMENT '纸张方向（PORTRAIT / LANDSCAPE）',
  binding VARCHAR(50) NOT NULL COMMENT '装订边（LEFT / TOP）',
  copies INT NOT NULL COMMENT '打印份数',
  remark TEXT COMMENT '用户备注',
  status ENUM('UNPAID','PAID','PROCESSING','READY_TO_SEND','COMPLETED') NOT NULL DEFAULT 'UNPAID' COMMENT '订单状态',
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '订单提交时间',
  paid_at DATETIME COMMENT '支付时间',
  completed_at DATETIME COMMENT '处理完成时间',
  shipping_remark TEXT COMMENT '配送备注信息',
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES addresses(id) ON DELETE SET NULL,
  INDEX idx_status (status),
  INDEX idx_created_at (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='打印订单表';
-- 系统统计表：每日统计系统的打印数据和收入情况
CREATE TABLE system_statistics (
  id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY COMMENT '统计ID',
  date DATE NOT NULL UNIQUE COMMENT '统计日期',
  total_orders INT NOT NULL DEFAULT 0 COMMENT '当日总订单数',
  total_printed_pages INT NOT NULL DEFAULT 0 COMMENT '当日总打印页数',
  total_income DECIMAL(10,2) NOT NULL DEFAULT 0.00 COMMENT '当日总收入',
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后更新时间',
  INDEX uk_date (date),
  INDEX idx_updated_at (updated_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='系统统计表';

这是API文档内容:"

---

### 接口总述

所有用户接口均返回统一格式：

```json
{
  "ifSuccess": true,
  "status": 200,
  "response": "操作成功",
  "data": {}
}
```

其中：
- `ifSuccess`: 操作是否成功（布尔值）
- `status`: HTTP 状态码（整数）
- `response`: 操作结果描述信息（字符串）
- `data`: 返回数据（对象或数组）

---

### 接口列表

#### 1. 用户注册
**路径**: `POST /api/user/register`
**功能**: 注册新用户
**请求体参数**:
- `account`: 登录账号（字符串，必填）
- `username`: 昵称（字符串，必填）
- `password`: 密码（字符串，必填）
- `phone`: 手机号（字符串，可选）
- `email`: 邮箱（字符串，可选）
**响应字段**:
- `id`: 用户ID
- `account`, `username`, `role`, `created_at`

---

#### 2. 用户登录
**路径**: `POST /api/user/login`
**功能**: 用户登录系统
**请求体参数**:
- `account`: 登录账号（字符串，必填）
- `password`: 密码（字符串，必填）
**响应字段**:
- `token`: 访问令牌（字符串）
- `userId`, `username`, `role`

---

#### 3. 获取当前用户信息
**路径**: `GET /api/user/me`
**功能**: 获取当前登录用户的基本信息
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**响应字段**:
- `id`, `account`, `username`, `phone`, `email`, `role`, `exp`, `status`, `created_at`

---

#### 4. 修改个人信息
**路径**: `PATCH /api/user/update`
**功能**: 更新当前用户的昵称、手机号、邮箱等信息
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**请求体参数**（可选）:
- `username`: 新昵称（字符串）
- `phone`: 新手机号（字符串）
- `email`: 新邮箱（字符串）
**响应字段**:
- `username`, `phone`, `email`（更新后的信息）

---

#### 5. 修改密码
**路径**: `POST /api/user/change-password`
**功能**: 修改当前用户密码
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**请求体参数**:
- `oldPassword`: 旧密码（字符串，必填）
- `newPassword`: 新密码（字符串，必填）
**响应字段**: 无 data

---

#### 6. 获取用户经验与等级
**路径**: `GET /api/user/exp`
**功能**: 获取当前用户的打印经验值和对应等级
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**响应字段**:
- `exp`: 经验值（整数）
- `level`: 对应等级（整数）

---

#### 7. 获取用户订单列表（分页）
**路径**: `GET /api/user/orders`
**功能**: 分页获取当前用户的所有打印订单
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**查询参数**:
- `page`: 当前页码（字符串，默认为1）
- `size`: 每页数量（字符串，默认为10）
**响应字段**:
- `list`: 订单数组，每项包含：
  - `id`, `orderNo`, `totalPages`, `price`, `duplex`, `copies`, `status`, `createdAt`
- `total`: 总记录数（整数）

---

#### 8. 获取用户地址列表
**路径**: `GET /api/user/addresses`
**功能**: 获取当前用户保存的所有收货地址
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**响应字段**:
- 地址数组，每项包含：
  - `id`, `fullAddress`, `receiverName`, `receiverPhone`, `isDefault`

---

#### 9. 添加用户地址
**路径**: `POST /api/user/address/add`
**功能**: 添加一个新的收货地址
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**请求体参数**:
- `fullAddress`: 完整地址（字符串，必填）
- `receiverName`: 收件人姓名（字符串，必填）
- `receiverPhone`: 收件人电话（字符串，必填）
- `isDefault`: 是否设为默认地址（布尔值，可选）
**响应字段**:
- `id`, `fullAddress`, `receiverName`, `receiverPhone`, `isDefault`

---

#### 10. 设置默认地址
**路径**: `PATCH /api/user/address/set-default/{addressId}`
**功能**: 将指定地址设置为当前用户的默认地址
**请求头参数**:
- `satoken`: 用户鉴权 Token（字符串）
**路径参数**:
- `addressId`: 地址 ID（字符串，必填）
**响应字段**: 无 data

---

### 有关文件上传下载的接口

---

### 1. 文档上传
- **路径**: `POST /api/document/upload`
- **功能**: 用户上传文档文件（支持 PDF/DOCX/XLSX/PPTX/TXT）
- **请求头参数**:
  - `satoken`: 用户鉴权 Token（字符串，需登录后获取）
- **请求体参数**:
  - `file`: 要上传的文件（二进制格式，必填）
- **使用方式**:
  - 使用 `multipart/form-data` 格式提交文件
- **返回内容**:
  - 返回上传后的文档信息，包括 ID、文件名、页数、上传时间等

---

### 2. 文档下载
- **路径**: `GET /api/document/download/{documentId}`
- **功能**: 下载指定 ID 的文档文件
- **请求头参数**:
  - `satoken`: 用户鉴权 Token（字符串）
- **路径参数**:
  - `documentId`: 要下载的文档 ID（整数，必填）
- **使用方式**:
  - 发起 GET 请求，携带文档 ID 和 token
- **返回内容**:
  - 成功时返回文件流，前端应以 blob 处理并触发下载
  - 失败时返回 JSON 错误信息

---

### 3. 获取当前用户所有文档（分页）
- **路径**: `GET /api/document/list`
- **功能**: 分页获取当前用户上传的所有文档
- **请求头参数**:
  - `satoken`: 用户鉴权 Token（字符串）
- **查询参数**:
  - `page`: 当前页码（可选，默认为 1）
  - `size`: 每页数量（可选，默认为 10）
- **使用方式**:
  - 发起 GET 请求，携带 token 和分页参数
- **返回内容**:
  - 包含文档列表和总记录数的对象，每项包含 ID、文件名、页数、上传时间等

---

### 4. 删除指定文档
- **路径**: `DELETE /api/document/delete/{documentId}`
- **功能**: 删除指定 ID 的文档
- **请求头参数**:
  - `satoken`: 用户鉴权 Token（字符串）
- **路径参数**:
  - `documentId`: 要删除的文档 ID（整数，必填）
- **使用方式**:
  - 发起 DELETE 请求，携带文档 ID 和 token
- **返回内容**:
  - 成功或失败的状态信息，无数据返回

---

### 鉴权说明

- **需要 satoken 的接口**：仅限用户操作自身数据时使用，包括：
  - 获取个人信息
  - 修改个人信息
  - 修改密码
  - 获取经验等级
  - 获取订单列表
  - 获取地址列表
  - 添加地址
  - 设置默认地址
- **不需要 satoken 的接口**：注册、登录

---

### 参数说明

- **必填参数**：在接口中明确标注 required，如 account、username、password、oldPassword、newPassword、fullAddress、receiverName、receiverPhone。
- **可选参数**：如 phone、email、isDefault、page、size。
- **路径参数**：如 addressId，必须提供且为字符串类型。

---

### 数据权限控制

所有涉及用户数据的操作（如修改信息、查看订单、管理地址），都基于当前登录用户的身份进行限制，保证用户只能访问和修改自己的数据，由 satoken 控制权限。

---

"

---

## 📁 前端项目目录结构（Vue3 + TS）

```
src/
├── assets/               # 图片资源
├── components/            # 公共组件
├── views/                 # 页面组件
│   ├── home/
│   ├── order/
│   ├── upload/
│   └── admin/
├── router/                # 路由配置
├── store/                 # Pinia 状态管理
├── services/              # 接口请求封装
├── utils/                 # 工具函数
├── types/                 # TypeScript 类型定义
├── App.vue
└── main.ts
```

### ✅ Spring Boot 部分

在生成【订单模块】/【文档模块】/【管理员模块】的后端代码时，请基于以下项目结构与编码风格进行开发：

---

## 📁 项目目录结构（Spring Boot 后端）

```
src/
└── main/
    └── java/
        └── com.powercess.printersystem.printersystem
            │ PrinterSystemApplication.java
            │
            ├── config/
            │   └── SaTokenConfig.java             # Sa-Token 配置类
            │
            ├── controller/
            │   ├── UserController.java            # 用户控制器
            │   ├── DocumentController.java        # 文档控制器
            │   ├── OrderController.java           # 订单控制器（待创建）
            │   └── AdminController.java           # 管理员控制器（待创建）
            │
            ├── service/
            │   ├── UserService.java               # 用户服务接口
            │   ├── AddressService.java            # 地址服务接口
            │   ├── DocumentService.java           # 文档服务接口
            │   ├── OrderService.java              # 订单服务接口（待创建）
            │   └── AdminService.java              # 管理员服务接口（待创建）
            │       └── impl/
            │           ├── UserServiceImpl.java   # 用户服务实现
            │           ├── AddressServiceImpl.java# 地址服务实现
            │           ├── DocumentServiceImpl.java # 文档服务实现
            │           ├── OrderServiceImpl.java  # 订单服务实现（待创建）
            │           └── AdminServiceImpl.java  # 管理员服务实现（待创建）
            │
            ├── mapper/
            │   ├── UserMapper.java                # 用户 Mapper 接口
            │   ├── AddressMapper.java             # 地址 Mapper 接口
            │   ├── DocumentMapper.java            # 文档 Mapper 接口
            │   ├── OrderMapper.java               # 订单 Mapper 接口（待创建）
            │   └── AdminMapper.java               # 管理员相关 Mapper（可选）（待创建）
            │
            ├── model/
            │   ├── User.java                      # 用户实体类
            │   ├── Address.java                   # 地址实体类
            │   ├── Document.java                  # 文档实体类
            │   ├── PrintOrder.java                # 打印订单实体类（待创建）
            │   └── SystemStatistic.java           # 系统统计实体类（待创建）
            │
            ├── dto/
            │   └── ResponseResult.java            # 统一响应封装类
            │
            ├── exception/
            │   ├── GlobalExceptionHandler.java    # 全局异常处理器
            │   └── BusinessException.java        # 自定义业务异常类
            │
            └── utils/
                └── PasswordUtils.java             # 密码加密工具类
```

---

## 🧱 编码规范与要求

### ✅ 数据库映射规则

- 实体类字段使用驼峰命名法。
- MyBatis 自动将驼峰字段映射为下划线数据库字段（如 `userName` → `user_name`）。
- Mapper XML 文件位于 `resources/mapper/` 目录中，路径与 Java Mapper 接口包结构一致。

### ✅ 接口返回格式

所有接口均返回统一格式：

```json
{
  "ifSuccess": true,
  "status": 200,
  "response": "操作成功",
  "data": {}
}
```

对应 Java 类：`ResponseResult<T>`

### ✅ 异常处理机制

- 使用 `@RestControllerAdvice` 统一处理异常。
- 抛出 `BusinessException(code, message)` 来触发自定义错误响应。
- 已支持对 `Exception`、`IllegalArgumentException`、`SecurityException` 等常见异常的捕获和友好提示。

### ✅ 鉴权控制

- 所有需要登录访问的接口由 Sa-Token 控制权限。
- 配置类 `SaTokenConfig.java` 中已放行 `/api/user/register` 和 `/api/user/login`。
- 其他接口默认需登录访问（通过 `StpUtil.checkLogin()` 判断）。

### ✅ 接口设计规范

- 所有接口路径以 `/api/xxx` 开头。
- 请求参数统一使用 `@RequestBody` + JSON 格式传递。
- 分页查询接口接受 `page` 和 `size` 查询参数（类型为 String）。
- 敏感字段（如密码）不在响应中返回。
- RESTful 风格：
  - `GET /api/order/{id}` 获取单个订单
  - `POST /api/order` 创建订单
  - `PUT /api/order/{id}` 更新订单
  - `DELETE /api/order/{id}` 删除订单

### ✅ 事务管理

- 对涉及多个数据库操作的方法（如下单、支付状态变更），添加 `@Transactional` 注解保证数据一致性。
- 在 Service 层方法上声明事务边界。

### ✅ 模拟支付功能

- 提供一个模拟支付接口，接收订单 ID，将订单状态从 `UNPAID` 改为 `PAID`，并更新支付时间。
- 可扩展为调用第三方支付平台回调逻辑。

### ✅ 管理员模块功能

- 禁用/启用用户账户（修改 `users.status` 字段）
- 查看所有订单（支持分页）
- 修改订单状态（如设为已完成）
- 查看系统统计数据（按日统计）

---

以下是有关文件的代码说明：“package com.powercess.printersystem.printersystem.exception;

              import lombok.Getter;

              public class BusinessException extends RuntimeException {
                  @Getter
                  private final int code;
                  private final String message;
                  public BusinessException(int code, String message) {
                      super(message);
                      this.code = code;
                      this.message = message;
                  }

                  @Override
                  public String getMessage() {
                      return message;
                  }
              }”和“package com.powercess.printersystem.printersystem.exception;

                  import com.powercess.printersystem.printersystem.dto.ResponseResult;
                  import org.springframework.http.HttpStatus;
                  import org.springframework.web.bind.annotation.ExceptionHandler;
                  import org.springframework.web.bind.annotation.RestControllerAdvice;

                  @RestControllerAdvice
                  public class GlobalExceptionHandler {
                      @ExceptionHandler(BusinessException.class)
                      public ResponseResult<String> handleBusinessException(BusinessException ex) {
                          return ResponseResult.error(ex.getCode(), ex.getMessage());
                      }
                      @ExceptionHandler(SecurityException.class)
                      public ResponseResult<String> handleSecurityException(SecurityException ex) {
                          return ResponseResult.error(HttpStatus.FORBIDDEN.value(), ex.getMessage());
                      }
                      @ExceptionHandler(java.io.FileNotFoundException.class)
                      public ResponseResult<String> handleFileNotFoundException(java.io.FileNotFoundException ex) {
                          return ResponseResult.error(HttpStatus.NOT_FOUND.value(), ex.getMessage());
                      }
                      @ExceptionHandler(IllegalArgumentException.class)
                      public ResponseResult<String> handleIllegalArgumentException(IllegalArgumentException ex) {
                          return ResponseResult.error(HttpStatus.BAD_REQUEST.value(), ex.getMessage());
                      }
                      @ExceptionHandler(Exception.class)
                      public ResponseResult<String> handleUnexpectedException(Exception ex) {
                          ex.printStackTrace();
                          return ResponseResult.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "服务器内部错误：" + ex.getMessage());
                      }
                  }”和“package com.powercess.printersystem.printersystem.dto;

                      import lombok.Data;
                      @Data
                      public class ResponseResult<T> {
                          private boolean ifSuccess;
                          private int status;
                          private String response;
                          private T data;
                          public static <T> ResponseResult<T> success(T data) {
                              ResponseResult<T> result = new ResponseResult<>();
                              result.setIfSuccess(true);
                              result.setStatus(200);
                              result.setResponse("操作成功");
                              result.setData(data);
                              return result;
                          }
                          public static <T> ResponseResult<T> error(int status, String message) {
                              ResponseResult<T> result = new ResponseResult<>();
                              result.setIfSuccess(false);
                              result.setStatus(status);
                              result.setResponse(message);
                              return result;
                          }
                      }”
yml文件：“spring:
         application:
           name: PrinterSystem
         datasource:
           url: jdbc:mysql://localhost:3306/print_service_system?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
           username: root
           password: Pubg20061027
           driver-class-name: com.mysql.cj.jdbc.Driver
         servlet:
           multipart:
             max-file-size: 50MB
             max-request-size: 50MB

       server:
         port: 8080

       mybatis-plus:
         configuration:
           log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
         mapper-locations: classpath*:mapper/**/*.xml

       sa-token:
         token-name: satoken
         timeout: 2592000
         is-concurrent: true
         is-share: true
         is-read-cookie: false
         isPrint: true
         isLog: true

”
密码工具类：“package com.powercess.printersystem.printersystem.utils;

       import org.mindrot.jbcrypt.BCrypt;
       public class PasswordUtils {
           /**
            * 加密明文密码
            */
           public static String hashPassword(String plainText) {
               return BCrypt.hashpw(plainText, BCrypt.gensalt());
           }
           /**
            * 验证密码是否匹配
            */
           public static boolean checkPassword(String plainText, String hashed) {
               return BCrypt.checkpw(plainText, hashed);
           }
       }”